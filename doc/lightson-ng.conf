# Sample config file for lightson-ng
# Edit and put it to /etc/lightson-ng.conf

# debugMode=1

detectNetworkLoadHigh=0
# network interface usage in percents
ifUsageMax="0.3"

# A list of remote PCs/devices connected to this PC.
remoteIpList=('123.123.123.123' '123.123.123.124')

# Sound card where detect sound on.
# This is Loopback card used for jams.
# Primary USB card can not always be used, if it is occupied by JACKD
# then it always has RUNNING status in ALSA (perhaps due to constant noise coming up from microphone?).
alsaCardStatus="/proc/asound/card1/pcm0p/sub0/status"
cpuLoadMax=4

# Flag to enable/disable your custom check.
# Each check function should have its corresponding flag.
# Notice naming convention:
# for flag: "detect<your_check_name>"
# for check funciton: "is<your_check_name>Check"
detectMyTest=0

# Custom check itself.
# It checks if file "myfile" exists in the temporary directory.
isMyTestCheck()
{
    local myFile="/tmp/myfile"

    # Execute your custom check.
    if [ -f "$myFile" ]
    then

        # Set the optional state disable reason.
        stateDisableReason="my check worked, file exists: $myFile"

        # Return zero code if check confirmed the condition.
        return 0

    else
        # Return non-zero code if check did not confirm the condition.
        return 1
    fi
}

# Custom function should be added to the list of checks using addToCheckList().
# 1st parameter - name of new function.
# 2'nd parameter - flags indicating which Power Management states the function should process
#      actionMask["idle"] or actionMask["sleep"] or both of them,
#      and is GUI required to perform the check: guiRequiredMask
#      Notice the syntax: flags are added as boolean operation. 
addToCheckList "isMyTestCheck" $(( ACTION_MASK["idle"] | GUI_REQUIRED_MASK ))

# Flag to enable a custom state handling functions.
forceHandleStateCustom=0

# State can be enabled/disabled by overwriting disableStateCustom() and enableStateCustom() functions in config file.
# Custom function can set the custom state inhibitor, such as "org.gnome.the_very_latest_ScreenSaver.SimulateUserActivity".
# Actually, any action can be coded in these functions, not nesessarily the Power Management state handling.
# These custom state handling functions are executed for the state indicated by check function.
# Example: if isTestCheck() confirmed the condition and it is configured with action mask actionMask["idle"],
# then disableStateCustom() will be executed once with $1 parameter passed to it. $1 will be set to "idle".

disableStateCustom()
{
    log "Custom disable state $1"

    # Send the message to desktop for monitoring.
    notify-send "State $1 disabled" "Check provided disable reason: ${disableReason[$state]}"
}

# enableStateCustom() is executed when no checks provided a disable reason of given state.
# Note: this check is always executed when lightson is finished or killed.
enableStateCustom()
{
    local state="$1" restoreReason="$2"

    log "Custom enable state $state"
    #notify-send "State $1 enabled" "No check provided reason to disable state $1"
    notify-send "State $state enabled" "$restoreReason"
}

# Continue the flow and set standard inhibitors after calling custom function.
# If set to 0 - then no standard inhibitors will be set after custom function worked.
# Note: this flag is useful only when option forceHandleStateCustom is set to 1.
continueWithHandleStateStandard=1


